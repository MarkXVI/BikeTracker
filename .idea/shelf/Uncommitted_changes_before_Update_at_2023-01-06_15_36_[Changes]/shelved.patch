Index: app/src/main/java/com/example/biketracker/UI/map/MapFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.biketracker.UI.map;\r\n\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.biketracker.DB.HTTPRequest;\r\nimport com.example.biketracker.MainActivity;\r\nimport com.example.biketracker.R;\r\nimport com.example.biketracker.databinding.FragmentMapBinding;\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\npublic class MapFragment extends Fragment implements OnMapReadyCallback {\r\n\r\n    private static final int UPDATE_INTERVAL_MILLIS = 30000; // 30 seconds\r\n\r\n    private Handler mHandler;\r\n    private Runnable mUpdateMapRunnable;\r\n\r\n    private static final String TAG = MapFragment.class.getSimpleName();\r\n    protected GoogleMap map;\r\n    private FusedLocationProviderClient fusedLocationProviderClient;\r\n\r\n    private final LatLng defaultLocation = new LatLng(55.6364, 13.5006); // Veberöd\r\n    private static final int DEFAULT_ZOOM = 15;\r\n    private static final int PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION = 1;\r\n    private boolean locationPermissionGranted;\r\n\r\n    private Location lastKnownLocation;\r\n\r\n    private FragmentMapBinding binding;\r\n    MainActivity mainActivity;\r\n\r\n    JSONArray locationsForMap;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n\r\n        mainActivity = (MainActivity) getActivity();\r\n        binding = FragmentMapBinding.inflate(inflater, container, false);\r\n        View root = binding.getRoot();\r\n\r\n        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(requireActivity());\r\n\r\n        mHandler = new Handler();\r\n        mUpdateMapRunnable = () -> {\r\n            // update the map\r\n            updateMap();\r\n\r\n            // schedule the next update\r\n            mHandler.postDelayed(mUpdateMapRunnable, UPDATE_INTERVAL_MILLIS);\r\n        };\r\n        mHandler.postDelayed(mUpdateMapRunnable, UPDATE_INTERVAL_MILLIS);\r\n\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment supportMapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\r\n        assert supportMapFragment != null;\r\n        supportMapFragment.getMapAsync(this);\r\n\r\n        binding.fab.setOnClickListener(view -> {\r\n            Log.v(TAG, \"fab CLICK\");\r\n            Snackbar.make(view, \"This is a Bike Tracker App\", Snackbar.LENGTH_LONG).setAction(\"Action\", null).show();\r\n        });\r\n\r\n        binding.myLocation.setOnClickListener(view -> {\r\n            Log.v(TAG, \"myLocation CLICK\");\r\n            centerCurrentLocation(view);\r\n        });\r\n\r\n        return root;\r\n    }\r\n\r\n    private void updateMap() {\r\n        Log.i(\"MapFragment UpdateMap\", \"Updating...\");\r\n        SupportMapFragment supportMapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\r\n        assert supportMapFragment != null;\r\n        supportMapFragment.getMapAsync(this);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        Log.i(\"MapFragment UpdateMap\", \"Paused\");\r\n        super.onPause();\r\n\r\n        // stop the updates when the activity is paused\r\n        mHandler.removeCallbacks(mUpdateMapRunnable);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        Log.i(\"MapFragment UpdateMap\", \"Resumed\");\r\n        super.onResume();\r\n\r\n        // start the updates when the activity is resumed\r\n        mHandler.postDelayed(mUpdateMapRunnable, UPDATE_INTERVAL_MILLIS);\r\n    }\r\n\r\n    private void getDeviceLocation() {\r\n\r\n        try {\r\n            if (locationPermissionGranted) {\r\n                Task<Location> locationResult = fusedLocationProviderClient.getLastLocation();\r\n                locationResult.addOnCompleteListener(requireActivity(), task -> {\r\n                    if (task.isSuccessful() && task.getResult() != null) {\r\n                        lastKnownLocation = task.getResult();\r\n                        centerCurrentLocation(getView());\r\n                    } else {\r\n                        Log.d(TAG, \"Current location is null. Using defaults.\");\r\n                        Log.e(TAG, \"Exception: %s\", task.getException());\r\n                        map.moveCamera(CameraUpdateFactory\r\n                                .newLatLngZoom(defaultLocation, DEFAULT_ZOOM));\r\n                        map.getUiSettings().setMyLocationButtonEnabled(false);\r\n                    }\r\n                });\r\n            }\r\n        } catch (SecurityException e)  {\r\n            Log.e(\"Exception: %s\", e.getMessage(), e);\r\n        }\r\n    }\r\n\r\n    private void getLocationPermission() {\r\n        if (ContextCompat.checkSelfPermission(requireActivity().getApplicationContext(),\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION)\r\n                == PackageManager.PERMISSION_GRANTED) {\r\n            locationPermissionGranted = true;\r\n        } else {\r\n            ActivityCompat.requestPermissions(requireActivity(),\r\n                    new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},\r\n                    PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        binding = null;\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(@NonNull GoogleMap googleMap) {\r\n        map = googleMap;\r\n\r\n        Thread thread = new Thread(() -> {\r\n        HTTPRequest httpRequest = new HTTPRequest(requireContext());\r\n        try {\r\n            locationsForMap = new JSONArray();\r\n            locationsForMap.put(httpRequest.requestLocation(\"6038298e459b2700069d025e\"));\r\n            JSONObject obj = new JSONObject();\r\n\r\n            obj.put(\"name\", \"Sydney\");\r\n            obj.put(\"latLng\", \"[-34,151]\");\r\n            locationsForMap.put(obj);\r\n\r\n            obj = new JSONObject();\r\n            obj.put(\"name\", \"Veberöd\");\r\n            obj.put(\"latLng\", \"[55.6364,13.5006]\");\r\n            locationsForMap.put(obj);\r\n\r\n            Log.v(\"MapFragment onMapReady\", locationsForMap.toString());\r\n        } catch (IOException | JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n    });\r\n\r\n        thread.start();\r\n        try {\r\n            thread.join();\r\n\r\n            addToMap();\r\n\r\n            getLocationPermission();\r\n            updateLocationUI();\r\n            getDeviceLocation();\r\n\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void addToMap() {\r\n\r\n        for (int i = 0; i < locationsForMap.length(); i++) {\r\n\r\n            JSONObject value;\r\n            String name = \"\";\r\n            LatLng latLng = null;\r\n            try {\r\n                value = (JSONObject) locationsForMap.get(i);\r\n                Log.v(\"MapFragment addToMap\", String.valueOf(value));\r\n                // get the name and LatLng from the value object\r\n                name = value.getString(\"name\");\r\n                JSONArray jsonArray = new JSONArray(value.getString(\"latLng\"));\r\n                double latitude = jsonArray.getDouble(0);\r\n                double longitude = jsonArray.getDouble(1);\r\n                latLng = new LatLng(latitude, longitude);\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n            Log.v(\"MapFragment addToMap\", \"name: \" + name + \", latLng: \" + latLng);\r\n            assert latLng != null;\r\n            map.addMarker(new MarkerOptions().position(latLng).title(\"Marker for \" + name).visible(true));\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        locationPermissionGranted = false;\r\n        if (requestCode\r\n                == PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION) {// If request is cancelled, the result arrays are empty.\r\n            if (grantResults.length > 0\r\n                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                locationPermissionGranted = true;\r\n            }\r\n        } else {\r\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        }\r\n        updateLocationUI();\r\n    }\r\n\r\n    private void updateLocationUI() {\r\n        if (map == null) {\r\n            return;\r\n        }\r\n        try {\r\n            map.getUiSettings().setMyLocationButtonEnabled(false);\r\n            if (locationPermissionGranted) {\r\n                map.setMyLocationEnabled(true);\r\n            } else {\r\n                map.setMyLocationEnabled(false);\r\n                lastKnownLocation = null;\r\n                getLocationPermission();\r\n            }\r\n        } catch (SecurityException e)  {\r\n            Log.e(\"Exception: %s\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void centerCurrentLocation(View view) {\r\n        if (lastKnownLocation != null) {\r\n            Snackbar.make(view, (lastKnownLocation.getLatitude() + \", \" + lastKnownLocation.getLongitude()) , Snackbar.LENGTH_LONG).setAction(\"Action\", null).show();\r\n            map.moveCamera(CameraUpdateFactory.newLatLngZoom(\r\n                    new LatLng(lastKnownLocation.getLatitude(),\r\n                            lastKnownLocation.getLongitude()), DEFAULT_ZOOM));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/biketracker/UI/map/MapFragment.java b/app/src/main/java/com/example/biketracker/UI/map/MapFragment.java
--- a/app/src/main/java/com/example/biketracker/UI/map/MapFragment.java	(revision 0551295be6171f5fab0d5bd1c42575854d8b6b70)
+++ b/app/src/main/java/com/example/biketracker/UI/map/MapFragment.java	(date 1673015552173)
@@ -2,7 +2,6 @@
 
 import android.content.pm.PackageManager;
 import android.location.Location;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.util.Log;
@@ -35,11 +34,6 @@
 import org.json.JSONObject;
 
 import java.io.IOException;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
 
 public class MapFragment extends Fragment implements OnMapReadyCallback {
 
Index: app/src/main/java/com/example/biketracker/DB/HTTPRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.biketracker.DB;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.util.Log;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Collections;\r\nimport java.util.Objects;\r\n\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.RequestBody;\r\nimport okhttp3.Response;\r\nimport okhttp3.ResponseBody;\r\nimport okio.Buffer;\r\n\r\n\r\npublic class HTTPRequest {\r\n\r\n    OkHttpClient client;\r\n    Context context;\r\n\r\n    public HTTPRequest (Context context) {\r\n        this.context = context;\r\n\r\n        client = new OkHttpClient.Builder()\r\n                .addInterceptor(chain -> {\r\n                    Request request = chain.request();\r\n\r\n                    // print the request method, URL, and headers\r\n                    Log.v(\"HTTPRequest\",request.method() + \" \" + request.url());\r\n                    if (request.headers().names().size() != 0) {\r\n                        for (String name : request.headers().names()) {\r\n                            Log.v(\"HTTPRequest\", name + \": \" + request.headers().get(name));\r\n                        }\r\n                    } else\r\n                        Log.v(\"HTTPRequest\",\"No head...\");\r\n\r\n                    // read the request body into a string\r\n                    if (request.body() != null) {\r\n                        Buffer buffer = new Buffer();\r\n                        Objects.requireNonNull(request.body()).writeTo(buffer);\r\n                        String bodyString = buffer.readUtf8();\r\n\r\n                        // print the body\r\n                        Log.v(\"HTTPRequest\", bodyString);\r\n                    } else\r\n                        Log.v(\"HTTPRequest\",\"No body...\");\r\n\r\n                    return chain.proceed(request);\r\n                })\r\n                .build();\r\n    }\r\n\r\n    private String requestToken() throws IOException, JSONException {\r\n\r\n        String token = \"\";\r\n\r\n        MediaType mediaType = MediaType.parse(\"application/json\");\r\n        RequestBody tokenBody = MultipartBody.create(mediaType,\r\n                \"{\\\"username\\\":\\\"Byutveckling AB Smarta Byar\\\",\\\"password\\\":\\\"UnityTest2\\\"}\");\r\n\r\n        Request tokenRequest = new Request.Builder()\r\n                .url(\"https://kraftringen.yggio.net/api/auth/local\")\r\n                .post(tokenBody)\r\n                .addHeader(\"accept\", \"application/json\")\r\n                .addHeader(\"Content-Type\", \"application/json\")\r\n                .build();\r\n\r\n        Response tokenResponse = client.newCall(tokenRequest).execute();\r\n\r\n        int responseCode = tokenResponse.code();\r\n        if (responseCode == 200) {\r\n            // request was successful\r\n            Log.v(\"HTTPRequest Token\", \"Hurray 200\");\r\n        } else {\r\n            // request was not successful\r\n            Log.v(\"HTTPRequest Token\", \"Response Code: \" + responseCode + \". Boo!\");\r\n        }\r\n        ResponseBody body = tokenResponse.body();\r\n        if (body != null) {\r\n            String responseString = body.string();\r\n            JSONObject json = new JSONObject(responseString);\r\n            Log.v(\"HTTPRequest Token\", String.valueOf(json));\r\n            token = json.getString(\"token\");\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n\r\n    public JSONObject requestLocation(String id) throws IOException, JSONException {\r\n\r\n        String token = requestToken();\r\n\r\n        JSONObject obj = new JSONObject();\r\n\r\n        Request locationRequest = new Request.Builder()\r\n                .url(\"https://kraftringen.yggio.net/api/iotnodes/\" + id)\r\n                .get()\r\n                .addHeader(\"accept\", \"application/json\")\r\n                .addHeader(\"Authorization\", \"Bearer \" + token)\r\n                .build();\r\n\r\n        Response locationResponse = client.newCall(locationRequest).execute();\r\n\r\n        int responseCode = locationResponse.code();\r\n        if (responseCode == 200) {\r\n            // request was successful\r\n            Log.v(\"HTTPRequest Location\", \"Hurray 200\");\r\n        } else {\r\n            // request was not successful\r\n            Log.v(\"HTTPRequest Location\", \"Response Code: \" + responseCode + \". Boo!\");\r\n        }\r\n        ResponseBody body = locationResponse.body();\r\n        if (body != null) {\r\n            String responseString = body.string();\r\n            Log.v(\"HTTPRequest Location\", responseString);\r\n            JSONObject json = new JSONObject(responseString);\r\n            String name = json.getString(\"name\");\r\n            String latlng = json.getString(\"latlng\");\r\n\r\n            obj.put(\"name\", name);\r\n            obj.put(\"latLng\", latlng);\r\n            Log.v(\"HTTPRequest Location\", obj.toString());\r\n        }\r\n        return obj;\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/biketracker/DB/HTTPRequest.java b/app/src/main/java/com/example/biketracker/DB/HTTPRequest.java
--- a/app/src/main/java/com/example/biketracker/DB/HTTPRequest.java	(revision 0551295be6171f5fab0d5bd1c42575854d8b6b70)
+++ b/app/src/main/java/com/example/biketracker/DB/HTTPRequest.java	(date 1673015552170)
@@ -1,14 +1,12 @@
 package com.example.biketracker.DB;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.util.Log;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.IOException;
-import java.util.Collections;
 import java.util.Objects;
 
 import okhttp3.MediaType;
